package com.attiasas.gamedevtoolkitplugin.parser;

import java.util.*;

/**
 * @Author: Assaf, On 2/27/2023
 * @Description: Context free grammar parser
 **/
public class CFGParser {

    private static Map<String, List<String>> rules = new HashMap<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of rules: ");
        int numRules = scanner.nextInt();

        // Read in the rules
        for (int i = 0; i < numRules; i++) {
            System.out.print("Enter the left-hand side of rule " + (i+1) + ": ");
            String lhs = scanner.next();
            System.out.print("Enter the right-hand side of rule " + (i+1) + ": ");
            String rhs = scanner.next();
            addRule(lhs, rhs);
        }

        // Parse the input string
        System.out.print("Enter the input string to parse: ");
        String input = scanner.next();
        boolean result = parse(input, "S");
        System.out.println(result ? "The input string is in the language generated by the grammar." : "The input string is not in the language generated by the grammar.");
    }

    private static void addRule(String lhs, String rhs) {
        List<String> productions = rules.getOrDefault(lhs, new ArrayList<>());
        productions.add(rhs);
        rules.put(lhs, productions);
    }

    private static boolean parse(String input, String nonTerminal) {
        if (input.length() == 0) {
            // If the input string is empty and the non-terminal is the start symbol, we have a match
            return nonTerminal.equals("S");
        }

        if (!rules.containsKey(nonTerminal)) {
            // If there are no productions for this non-terminal, we have no match
            return false;
        }

        for (String rhs : rules.get(nonTerminal)) {
            // Check each production for a match
            if (rhs.charAt(0) >= 'a' && rhs.charAt(0) <= 'z') {
                // If the production starts with a terminal, check if it matches the next character in the input string
                if (input.length() > 0 && input.charAt(0) == rhs.charAt(0)) {
                    // If it matches, try to match the rest of the input string with the rest of the production
                    if (parse(input.substring(1), rhs.substring(1))) {
                        return true;
                    }
                }
            } else {
                // If the production starts with a non-terminal, recursively parse with that non-terminal
                if (parse(input, rhs)) {
                    return true;
                }
            }
        }

        // If none of the productions matched, there is no match
        return false;
    }

}